<%- include(headerPath) %>

<style>
    li.buttons-columnVisibility a {
        cursor:pointer;
        }
    li.buttons-columnVisibility.active a {
        background-color:transparent;
        color:inherit; 
        }
    li.buttons-columnVisibility.active a:hover {
        background-color:#f5f5f5;
        color:inherit;
        }
    li.buttons-columnVisibility a:before {
        width:25px;
        font-family:"Glyphicons Halflings";
        content:"\e013";
        color:transparent;
        padding-right:10px;
        }
    li.buttons-columnVisibility.active a:before {
        color:inherit;
        }
    #table_filter label { min-width: 100%;}
    #table_filter label input{ min-width: 100%;}
</style>
<div class="content-wrapper">
	<section class="content-header">
		<div class="content-fluid">
			<div class="row">
				<div class="col-12">
					<h1>
						<i class="fa fa-table"></i> Data Modul Alarm
					</h1>
				</div>
			</div>
		</div>
	</section>
    <section class="content">
		<div class="content-fluid">
			<div class="row">
				<div class="col-lg-12 col-12">
                    <form method="POST" id="setAlarmForm">
					<div class="card">
						<div class="card-body">
                            <div class="form-group">
                                Un-plug then plug your alarm modul. Then click Scan button.<br>
                                Cabut kemudian Pasang modul alarm. Kemudian klik tombol Scan<br>
                                <button class="btn btn-sm btn-success" type="button" onclick="cekSerialUsb()"><i class="fa fa-search"></i> SCAN</button>
                            </div>
                            <div class="form-group">
                                <p id="hasil_scan"></p>
                                <label>Serial Port</label>
                                <select class="form-control" name="unit_ip" id="list_scan" required>

                                </select>
                            </div>
                            <div class="form-group">
                                <label>Test Serial</label>
                                <select class="form-control" id="test_data">
                                    <option value="1">OK</option>
                                    <option value="2">NG</option>
                                    <option value="0">OFF</option>
                                </select>
                                <button class="btn btn-sm btn-primary" type="button" onclick="testSerial()"><i class="fa fa-send"></i> SEND</button>
                            </div>
						</div>
                        <div class="card-footer">
                            <button class="btn btn-sm btn-primary" type="submit"><i class="fa fa-save"></i> SAVE</button>
                        </div>
					</div>
                    </form>
				</div>
			</div>
		</div>
	</section>
</div>
<script type="text/javascript">
	
	async function cekSerialUsb() {
        try {
            const response = await fetch('/sii/cekModule', {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const point = await response.json();

            document.getElementById('hasil_scan').innerHTML = point.hasil_scan;
            document.getElementById('list_scan').innerHTML = point.list_scan;
        } catch (error) {
            console.error('Error fetching serial USB data:', error);
        }
    }
    async function testSerial() {
        try {
            const listScan = document.getElementById('list_scan').value;
            const testData = document.getElementById('test_data').value;

            const response = await fetch('/sii/testModule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    list_scan: listScan,
                    test_data: testData
                }),
                cache: 'no-cache'
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const point = await response.json();

            // Handle the response here (e.g., updating UI)
            console.log('Response:', point);
        } catch (error) {
            console.error('Error during serial test:', error);
        }
    }
    document.getElementById('setAlarmForm').addEventListener('submit', async (e) => {
        e.preventDefault(); // Prevent default form submission

        // Get form data
        const unitIp = document.getElementById('list_scan').value;

        if (!unitIp) {
            Swal.fire({
                icon: 'warning',
                title: 'Missing Input',
                text: 'Please select a Serial Port before saving.',
            });
            return;
        }

        // Create the request body
        const requestBody = {
            unit_ip: unitIp
        };

        try {
            // Send the request to the server
            const response = await fetch('/sii/setAlarm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            // Parse the response
            const result = await response.json();

            if (response.ok) {
                swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: result.message,
                });
            } else {
                swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message,
                });
            }
        } catch (error) {
            console.error('Error:', error);
            swal.fire({
                icon: 'error',
                title: 'Unexpected Error',
                text: 'An unexpected error occurred. Please try again.',
            });
        }
    });
</script>


<%- include(footerPath) %>